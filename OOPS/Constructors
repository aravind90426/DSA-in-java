
CONSTRUCTOR
-----------
 * construcor is a special function that runs which you create an object and
it allocates some variable
 *  which is used to initialoze  the object.
 *  class name and method name must be same.
 *  it doesnot return any thing.

	public class Student {
    int rno;
    String name;
    float marks;
    Student() {
        this.rno = 6;
        this.name ="ARAVIND";
        this.marks = 90.00f;
    }

    Student(int rno, String name, float marks) {
        this.rno = rno;
        this.name = name;
        this.marks = marks;
    }

}
	public class Main {
    public static void main(String[] args)
    {

        Student s1=new Student();



        System.out.println(s1.rno);       	   // 6
        System.out.println(s1.name);     	   // ARAVIND
        System.out.println(s1.marks);    	   //90.0

        Student s2=new Student(7,"arun",60);
        System.out.println(s2.rno);        	  // 7
        System.out.println(s2.name);     	   // arun
        System.out.println(s2.marks);     	  //60.0




    }

}


after getting value from user and change it

in main method
_______________


    void  setName(String name)
    {
        this.name=name;
    }

in Studebt class
________________

 	Student s1=new Student();

        System.out.println(s1.rno);          // 6
        System.out.println(s1.name);        // ARAVIND
        System.out.println(s1.marks);       //90.0

        Student s2=new Student(7 ,"arun" ,90);

        System.out.println(s2.rno);          // 6
        System.out.println(s2.name);        //
        System.out.println(s2.marks);       //90.0

        s2.setName("ragu");
        System.out.println(s2.name);    //ragu


copying one object data to another object
-----------------------------------------

public class Student {
    int rno;
    String name;
    float marks;
    Student() {
        this.rno = 6;
        this.name ="ARAVIND";
        this.marks = 90.00f;
    }

    Student( Student other) {
        this.rno = other.rno;
        this.name =other.name;
        this.marks = other.marks;
    }

    Student(int rno, String name, float marks) {
        this.rno = rno;
        this.name = name;
        this.marks = marks;
    }

}


public class Main {
    public static void main(String[] args)
    {
        Student s1=new Student();

        System.out.println(s1.rno);          // 6
        System.out.println(s1.name);        // ARAVIND
        System.out.println(s1.marks);       //90.0
        Student s2=new Student(7 ,"arun" ,90);

        System.out.println(s2.rno);          // 6
        System.out.println(s2.name);        //arum
        System.out.println(s2.marks);       //90.0

       Student random = new Student(s2);
        System.out.println(random.rno);          // 6
        System.out.println(random.name);        //arun
        System.out.println(random.marks);       //90.0



    }

}


this - keyword

 * it will refers to the current object in a constructor or methotd
 * ithu voda value tha ithu nu solldrathukuy this  keyword use pandrom


constructor overloading
--------------------------
   -> it is multiple  constructor  over load like three values it will go to among state ment



public class Student {
    int rno;
    String name;
    float marks;
    Student() {
        this.rno = 6;
        this.name ="ARAVIND";
        this.marks = 90.00f;
    }

    Student( Student other) {
        this.rno = other.rno;
        this.name =other.name;
        this.marks = other.marks;
    }

    Student(int rno, String name, float marks) {
        this.rno = rno;
        this.name = name;
        this.marks = marks;
    }
}

calling A constructor from another constructor
------------------------------------------------
public class Student {
    int rno;
    String name;
    float marks;
    Student() {
//this is how you will call a constructor from another constructor

        this(12,"defauly",100.00f);
    }

    Student(int rno, String name, float marks) {
        this.rno = rno;
        this.name = name;
        this.marks = marks;
    }
}
public class Main {
    public static void main(String[] args)
    {
        Student s1=new Student();

        System.out.println(s1.rno);          // 12
        System.out.println(s1.name);        //defauly
        System.out.println(s1.marks);       //100.0
    }
}


-> objects are stored in heap when we use new keyword
 a=10

-> in python there is no primitive

-> it can be use for increase speed in java.


copying one reference variable to another reference variable
----------------------------------------------------------------

public class Main {
    public static void main(String[] args)
    {
        Student s1=new Student();

        System.out.println(s1.rno);          // 6
        System.out.println(s1.name);        // ARAVIND
        System.out.println(s1.marks);       //90.00

	Student s2=s1;
        s1.name="something something";   // if we change s1.name it will also change s2.name because both are pointing to same object.

        System.out.println(s2.name); // something something

    }
}